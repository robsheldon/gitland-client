#!/usr/bin/php
<?php

//  https://github.com/programical/gitland

include __DIR__ . '/config';

/******************************************************************************
*                                                                             *
*   Map class.                                                                *
*                                                                             *
*   Stores, parses, returns map-related information.                          *
*                                                                             *
******************************************************************************/

class Map
{

    private static $_map        = [];
    private static $_map_height = 0;
    private static $_map_width  = 0;
    private static $_decay      = [];
    private static $_max_decay  = 1;
    private static $_bots       = [];
    private static $_current    = [
        'x'     => 0,
        'y'     => 0,
        'color' => '',
    ];
    private static $_last_move  = '';
    private static $_log        = [];


    /**
     * Load the game map.
     *
     * @param   string      $game_path
     *
     * @return  void
     */
    public static function load ($game_path)
    {
        if ( @file_exists("$game_path/map") && is_resource($map_file = @fopen("$game_path/map", 'r')) ) {
            while ( ! empty($line = trim(fgets($map_file))) ) {
                static::$_map[] = array_map('trim', explode(',', $line));
            }
            fclose($map_file);
        }
        if ( empty(static::$_map) ) {
            echo "ERROR: Failed to load map\n";
            stop();
        }
        //  Cache map dimensions.
        static::$_map_height = count(static::$_map);
        static::$_map_width  = max(array_map('count', static::$_map));
        //  Read all player data. This is expensive but most of the strategies
        //  will require the information anyway; might as well load it all at
        //  once and get a little i/o cache advantage.
        $players = [];
        foreach (glob("$game_path/players/?*/?*") as $file_path) {
            $data = trim(file_get_contents($file_path));
            list($player, $key) = explode('/', str_replace("$game_path/players/", '', $file_path));
            if ( ! array_key_exists($player, $players) ) {
                $players[$player] = [];
            }
            switch ($key) {
                case 'x':
                case 'y':
                    if ( strlen($data) == 0 || ! is_numeric($data) ) {
                        echo "Invalid position for $player\n";
                        $players[$player][$key] = 0;
                    }
                    else {
                        $players[$player][$key] = intval($data);
                    }
                    break;
                default:
                    $players[$player][$key] = $data;
                    break;
            }
        }
        //  Ensure the current player is in the game.
        $player_name = config::PLAYER_NAME;
        if ( ! array_key_exists($player_name, $players) ) {
            echo "ERROR: Could not find player data directory for $player_name\n";
            stop();
        }
        //  Save the current player's position and info.
        static::$_current = [
            'x' => $players[$player_name]['x'],
            'y' => $players[$player_name]['y'],
            'color' => substr($players[$player_name]['team'], 1, 1),
        ];
        //  Build the bots data structure using their current positions as
        //  unique keys.
        foreach ($players as $bot_name => $bot_info) {
            if ( ! array_key_exists('x', $bot_info) || ! array_key_exists('y', $bot_info) || ! array_key_exists('team', $bot_info) ) {
                echo "ERROR: Can't store data for $bot_name because it's missing required values; skipping.\n";
                continue;
            }
            static::$_bots[$bot_info['x'] . '/' . $bot_info['y']] = new Bot(array_merge([
                'name'  => $bot_name,
                'color' => substr($bot_info['team'], 1, 1),
                'position'  => ['x' => $bot_info['x'], 'y' => $bot_info['y']],
            ], $bot_info));
        }
        //  Retrieve the bot's last move.
        static::$_last_move = trim(file_get_contents(config::CLIENT_BASE_DIR . '/act'));
        //  Load tile decay data, if available.
        if ( @file_exists("$game_path/decay") && is_resource($decay_file = @fopen("$game_path/decay", 'r')) ) {
            while ( ! empty($line = trim(fgets($decay_file))) ) {
                static::$_decay[] = array_map('intval', array_map('trim', explode(',', $line)));
            }
            fclose($decay_file);
            //  Guarantee that the dimensions of the decay array exactly matches
            //  the dimensions of the map.
            if ( array_map('count', static::$_map) !== array_map('count', static::$_decay) ) {
                echo "Decay dimensions don't match map dimensions; setting default decay values.\n";
                static::$_decay = array_map(function($row){
                    return array_fill(0, count($row), 1);
                }, static::$_map);
            }
            //  Find the maximum decay value on the map -- used to calculate the
            //  age of individual tiles as a percentage.
            $max_decay = max(array_map('max', static::$_decay));
            //  Do one last sweep through the decay values to convert them to
            //  percentages, so this doesn't need to get recalculated.
            //  See notes in get_decay_pct().
            static::$_decay = array_map(function($row) use ($max_decay){
                return array_map(function($decay_value) use ($max_decay){
                    return 1 - ($decay_value / $max_decay);
                }, $row);
            }, static::$_decay);
            static::$_max_decay = $max_decay;
        }
        //  Load the last 50 relevant entries of the game log.
        exec("cd $game_path && git log -p -n 50 log", $log_lines);
        $relevant_lines = array_filter(preg_grep('/^(Date:|[+ ][^+ ]+)/', $log_lines), function($line){
            return preg_match('/tile .* was lost due to decay/', $line) !== 1 && preg_match("/didn't join - invalid team name/", $line) !== 1;
        });
        $log_timestamp = '';
        foreach ($relevant_lines as $line) {
            if ( $line[0] == '+' ) {
                $line[0] = ' ';
            }
            if ( $line[0] == ' ' ) {
                if ( $log_timestamp != '' ) {
                    static::$_log[$log_timestamp][] = trim($line);
                }
            }
            else if ( strpos($line, 'Date:') === 0 ) {
                $log_timestamp = trim(str_replace('Date:', '', $line));
                if ( @strtotime($log_timestamp) !== false ) {
                    static::$_log[$log_timestamp] = [];
                }
                else {
                    $log_timestamp = '';
                }
            }
        }
    }


    /**
     * Return the size of the map in x and y dimensions.
     *
     * @return  array
     */
    public static function size ()
    {
        return ['x' => static::$_map_width, 'y' => static::$_map_height];
    }


    /**
     * Return the map value stored at a given position or null if that position
     * is not valid.
     *
     * @param   int         $x
     * @param   int         $y
     *
     * @return  string
     */
    public static function get ($x, $y = null)
    {
        if ( is_array($x) && is_null($y) ) {
            $y = $x[1];
            $x = $x[0];
        }
        if ( is_null($x) || is_null($y) || $y < 0 || $y >= count(static::$_map) || $x < 0 || $x >= count(static::$_map[$y]) ) {
            return null;
        }
        return static::$_map[$y][$x];
    }


    /**
     * Return the entire internal map array.
     *
     * @return  array
     */
    public static function get_all ()
    {
        return static::$_map;
    }


    /**
     * Return the decay "lifetime" of a tile as a percentage. The game iterates
     * decay values downward but that makes things a bit logically confusing,
     * so this function converts the values to a percentage-of-lifespan.
     *
     * New tiles are returned as ~0 and old tiles approach .99 ("more decayed").
     *
     * @param   int         $x
     * @param   int         $y
     *
     * @return  double
     */
    public static function get_decay_pct ($x, $y = null)
    {
        if ( is_array($x) && is_null($y) ) {
            $y = $x[1];
            $x = $x[0];
        }
        if ( is_null($x) || is_null($y) || $y < 0 || $y >= count(static::$_decay) || $x < 0 || $x >= count(static::$_decay[$y]) ) {
            return 1;
        }
        return static::$_decay[$y][$x];
    }


    /**
     * Return all decay percentage values.
     *
     * @return  array
     */
    public static function get_all_decay_pct ()
    {
        return static::$_decay;
    }


    /**
     * Return the bots in the map.
     *
     * @return  array
     */
    public static function get_bots ()
    {
        return static::$_bots;
    }


    /**
     * Return the history for a specified bot.
     *
     * @return  array
     */
    public static function get_bot_activity ($bot_name)
    {
        $entries = [];
        foreach (static::$_log as $timestamp => $lines) {
            $matches = preg_grep("/^$bot_name /", $lines);
            if ( count($matches) > 0 ) {
                $entries[] = array_shift($matches);
            }
            else {
                $entries[] = '';
            }
        }
        return $entries;
    }


    /**
     * Return a count of the number of $search occurrences in the map.
     *
     * @param   string      $search
     *
     * @return  integer
     */
    public static function count ($search)
    {
        $count = 0;
        $n = count(static::$_map);
        for ( $i=0; $i < $n; $i++ ) { 
            $row = array_count_values(static::$_map[$i]);
            if ( array_key_exists($search, $row) ) {
                $count += $row[$search];
            }
        }
        return $count;
    }


    /**
     * Given a direction and x, y coordinates, return a new pair of x, y
     * coordinates in that direction.
     *
     * @param   string      $direction
     * @param   int         $x
     * @param   int         $y
     * 
     * @return  array
     */
    public static function translate ($direction, $x, $y)
    {
        switch ($direction) {
            case 'left':
                return [--$x, $y];
            case 'right':
                return [++$x, $y];
            case 'up':
                return [$x, --$y];
            case 'down':
                return [$x, ++$y];
            case 'idle':
                return [$x, $y];
        }
        return [$x, $y];
    }


    /**
     * Return the opposite of a given direction.
     *
     * @param   string      $direction
     * 
     * @return  string
     */
    public static function opposite ($direction)
    {
        switch ($direction) {
            case 'left':
                return 'right';
            case 'right':
                return 'left';
            case 'up':
                return 'down';
            case 'down':
                return 'up';
        }
        echo "Invalid direction: $direction\n";
        stop();
    }


    /**
     * Return the scalar distance between two points on the map.
     *
     * @param   int         $x1
     * @param   int         $y1
     * @param   int         $x2
     * @param   int         $y2
     *
     * @return  int
     */
    public static function distance ($x1, $y1, $x2, $y2)
    {
        return abs($x2 - $x1) + abs($y2 - $y1);
    }


    /**
     * Return the bot's current x, y, or color value.
     *
     * @param   string      $key
     * 
     * @return  mixed
     */
    function current ($key)
    {
        return static::$_current[$key];
    }


    /**
     * Return the bot's most recent move.
     *
     * @return  string
     */
    function last_move ()
    {
        return static::$_last_move;
    }

}



/******************************************************************************
*                                                                             *
*   Bot class.                                                                *
*                                                                             *
*   Stores bot-related info (mostly other players) and provides functions     *
*   for analyzing their behavior in useful ways.                              *
*                                                                             *
******************************************************************************/

class Bot
{

    private $_data    = [];
    private $_history = [];
    private $_status  = '';

    /**
     * Return a new Bot object from a key-value array of data.
     *
     * @param  array        $data
     */
    public function __construct ($data)
    {
        $this->_data = $data;
    }


    /**
     * Return a value stored in the bot's data.
     *
     * @param   string      $key
     *
     * @return  mixed
     */
    public function __get ($key)
    {
        if ( array_key_exists($key, $this->_data) ) {
            return $this->_data[$key];
        }
        //  TODO: It's time for proper exception handling.
        return null;
    }

    /**
     * Return recent move-related history for this bot.
     *
     * @return  array
     */
    public function get_recent_moves ($n = null)
    {
        if ( empty($this->_history) ) {
            $this->_history = Map::get_bot_activity($this->_data['name']);
        }
        $moves = is_null($n) ? $this->_history : array_slice($this->_history, 0, $n);
        $moves = array_map(function($line){
            if ( preg_match('|moved to ([0-9]+/[0-9]+)|', $line, $move) === 1 ) {
                return $move[1];
            }
            else {
                return null;
            }
        }, $moves);
        return $moves;
    }


    /**
     * Return the target bot's current status according to its recent
     * move history. Returns either 'active', 'inactive', or 'disabled'.
     * 'disabled' bots haven't moved in the last 5 turns but have moved
     * in the last 20; 'inactive' bots haven't moved in the last 20 turns.
     */
    public function status ()
    {
        if ( empty($this->_status) ) {
            $recent = $this->get_recent_moves(20);
            if ( count(array_filter($recent)) == 0 ) {
                $this->_status = 'inactive';
            }
            else if ( count(array_filter(array_slice($recent, 0, 5))) == 0 ) {
                $this->_status = 'disabled';
            }
            else {
                $this->_status = 'active';
            }
        }
        return $this->_status;
    }
}



/******************************************************************************
*                                                                             *
*   Strategy class.                                                           *
*                                                                             *
*   Contains several different situational tactics and returns the best       *
*   available move depending on the conditions.                               *
*                                                                             *
******************************************************************************/

class Strategy
{

    static private $_weight          = 16;
    static private $_value_functions = [];
    static private $_value_matrix    = [];


    /**
     * Generates a map of values for each element on the board. If no scoring
     * functions are supplied, then the default ones are used (initialized
     * by find_move()).
     *
     * @param   array       $functions
     *
     * @return  array
     */
    private static function _generate_value_matrix ($functions = null)
    {
        if ( is_null($functions) ) {
            $functions = static::$_value_functions;
        }
        //  The Map loader has guaranteed that the decay value array exactly
        //  matches the dimensions of the map, so...
        return array_map(function($map_row, $decay_row) use ($functions){
            return array_map(function($location, $decay_pct) use ($functions){
                foreach ($functions as $regex => $score) {
                    if ( preg_match("/$regex/", $location) === 1 ) {
                        //  This little bit of math makes it so that younger
                        //  enemy tiles are more valuable than older ones and
                        //  older own tiles are less of an obstacle. This
                        //  slightly changes the balance of tile ages in the
                        //  game so that opponents have more old tiles and the
                        //  bot's team has slightly younger tiles overall.
                        return $score * (1 - $decay_pct);
                    }
                }
                return 0;
            }, $map_row, $decay_row);
        }, Map::get_all(), Map::get_all_decay_pct());
    }


    /**
     * Return the closest positive-value location from a given position.
     * This really needs some proper routefinding to compensate for obstacles.
     * TODO
     *
     * @return  array
     */
    public static function nearest_exit ()
    {
        $current_x = Map::current('x');
        $current_y = Map::current('y');
        $candidate_distance = $map_length * $map_height;
        $candidate_xy = [];
        foreach (static::$_value_matrix as $y => $row) {
            foreach ($row as $x => $value) {
                if ( $value > 0 ) {
                    $this_distance = Map::distance($current_x, $current_y, $x, $y);
                    if ( $this_distance < $candidate_distance ) {
                        $candidate_distance = $this_distance;
                        $candidate_xy = ['x' => $x, 'y' => $y];
                    }
                    if ( $y == $current_y && $this_distance > $candidate_distance ) {
                        //  Because this is a row-based scan of the map, nothing
                        //  closer will be found from this point.
                        break 2;
                    }
                }
            }
        }
        return $candidate_xy;
    }


    /**
     * Calculate a value for moving to a specific position on the map.
     * A weighting factor can be provided to adjust scores by distance
     * from the current position.
     * Enemy colors return higher scores, while own color and other players
     * return lower scores.
     *
     * @param   int         $x
     * @param   int         $y
     * @param   double      $weight
     *
     * @return  double
     */
    public static function score ($x, $y, $weight = 1)
    {
        if ( is_null(Map::get($x, $y)) ) {
            return 0;
        }
        return static::$_value_matrix[$y][$x] * $weight;
    }


    /**
     * Given a direction, current x, y coordinates, the current weighting factor,
     * and the spread distance, return a cumulative score for all squares along
     * that line.
     * 
     * @param   string      $direction
     * @param   int         $x
     * @param   int         $y
     * @param   double      $weight
     * @param   int         $spread
     * 
     * @return  double
     */
    public static function area_score ($direction, $x, $y, $weight, $spread)
    {
        $score = 0;
        $n = -1 * $spread;
        switch ($direction) {
            case 'left':
            case 'right':
                //  If going left or right, then spread vertically.
                while ( $n <= $spread ) {
                    $score += static::score($x, $y + $n, $weight / 2);
                    $n++;
                }
                break;
            case 'up':
            case 'down':
                //  If going up or down, then spread horizontally.
                while ( $n <= $spread ) {
                    $score += static::score($x + $n, $y, $weight / 2);
                    $n++;
                }
                break;
        }
        return $score;
    }


    /**
     * Calculate and return a score for each possible move.
     *
     * @return  string
     */
    public static function evaluate_moves ($moves)
    {
        $scores = [];
        foreach ($moves as $direction => $value) {
            $scores[$direction] = 0;
            $x = Map::current('x');
            $y = Map::current('y');
            $weight = config::SCORE_WEIGHT_FACTOR;
            $score = 0;
            $spread = 0;
            $lookahead_iteration = 0;
            while ( true ) {
                $lookahead_iteration++;
                //  Expand the lookahead beam a bit.
                if ( $lookahead_iteration % 2 != 0 ) {
                    $spread++;
                }
                //  Adjust weighting for distance from current position.
                $weight /= 2;
                //  Transform coordinates.
                list($x, $y) = Map::translate($direction, $x, $y);
                //  Calculate scores in this direction.
                $score = static::score($x, $y, $weight);
                if ( $score === 0 ) {
                    //  score() returns exactly 0 if the coordinates are not valid.
                    break;
                }
                //  If this direction is the opposite of the last direction, brutally
                //  penalize it to prevent oscillations.
                if ( Map::last_move() != 'idle' && $direction == Map::opposite(Map::last_move()) ) {
                    $score -= $weight;
                }
                //  Calculate the final score for this iteration of this direction.
                $scores[$direction] += ($score + static::area_score($direction, $x, $y, $weight, $spread));
            }
        }
        var_dump($scores);
        arsort($scores);
        return $scores;
    }


    /**
     * The "stuck" strategy, intended for situations where the bot has very
     * limited options available.
     *
     * @param   array       $available_moves
     *
     * @return  array
     */
    public static function stuck ($available_moves)
    {
        if ( count($available_moves) == 1 ) {
            $direction = array_keys($available_moves)[0];
            return ['move' => $direction, 'logmsg' => "stuck; $direction; xy:" . Map::current('x') . "," . Map::current('y')];
        }
        //  TODO: This should check for multiple recent stucks and attempt a
        //  teleportation if nothing else is working.
        return ['move' => 'idle', 'logmsg' => "stuck; idle; xy:" . Map::current('x') . "," . Map::current('y')];
    }


    /**
     * The "escape" strategy is used when all available moves are negative
     * and on the bot's own color.
     *
     * @param   array       $available_moves
     *
     * @return  array
     */
    public static function escape ($available_moves)
    {
        $destination = static::nearest_exit();
        if ( empty($destination) ) {
            //  Something has gone terribly wrong.
            return static::stuck([]);
        }
        $current_x = Map::current('x');
        $current_y = Map::current('y');
        $current_distance = Map::distance($current_x, $current_y, $destination['x'], $destination['y']);
        foreach ($available_moves as $direction => $value) {
            list($move_x, $move_y) = Map::translate($direction, $current_x, $current_y);
            if ( Map::distance($move_x, $move_y, $destination['x'], $destination['y']) < $current_distance ) {
                return ['move' => $direction, 'logmsg' => "escape; $direction; xy:$current_x,$currenty"];
            }
        }
        //  Okay, can't get there from here right now.
        return static::stuck([]);
    }


    /**
     * The "cruise" strategy. This uses scorebeam-based move evaluation, but
     * will keep the bot moving in the same direction as long as that direction
     * returns a positive score. This is a friendlier movement pattern that
     * doesn't chew up the board as badly as the aggressive default pattern.
     *
     * @param  array        $available_moves
     *
     * @return array
     */
    public static function cruise ($available_moves)
    {
        $scores = static::evaluate_moves($available_moves);
        if ( array_key_exists(Map::last_move(), $scores) && $scores[Map::last_move()] > 0 ) {
            return ['move' => Map::last_move(), 'logmsg' => "cruise; " . Map::last_move() . "; xy:" . Map::current('x') . "," . Map::current('y')];
        }
        //  This direction is no longer valid or is negatively scored.
        return ['move' => array_keys($scores)[0], 'logmsg' => "cruise; " . array_keys($scores)[0] . "; xy:" . Map::current('x') . "," . Map::current('y')];
    }


    /**
     * The "aggressive" (default) strategy. This uses scorebeam-based move
     * evaluation and the bot will aggressively pursue the highest available
     * score from its current position.
     *
     * @param  array        $available_moves
     *
     * @return array
     */
    public static function aggressive ($available_moves)
    {
        $scores = static::evaluate_moves($available_moves);
        return ['move' => array_keys($scores)[0], 'logmsg' => "aggressive; " . array_keys($scores)[0] . "; xy:" . Map::current('x') . "," . Map::current('y')];
    }


    /**
     * Return a direction and a commit message depending on the current game
     * situation.
     *
     * @return  array
     */
    public static function find_move ()
    {
        //  Initialize the default value functions. These apply starting values
        //  to each position on the board. The starting values are then used
        //  in calculating the overall value of moving in each direction.
        $my_color = Map::current('color');
        static::$_value_functions = [
            '^c.$' => config::SCORE_OTHER_BOTS,
            "^.$my_color\$" => config::SCORE_OWN_COLOR,
            '^.*$' => config::SCORE_OTHER_COLOR,
        ];
        //  Initialize a default value matrix.
        static::$_value_matrix = static::_generate_value_matrix();
        //  Load the default available commands.
        $commands = config::VALID_MOVES;
        //  Retrieve coordinates for available moves from the current map.
        //  Any invalid moves will get set to null.
        $available_moves = [];
        foreach ($commands as $command) {
            $available_moves[$command] = Map::get(Map::translate($command, Map::current('x'), Map::current('y')));
        }
        //  Remove invalid directions -- edges of map and any adjacent tiles
        //  containing another bot (and, for now, the "idle" command too).
        unset($available_moves['idle']);
        $available_moves = array_filter($available_moves, function($move){
            if ( is_null($move) || substr($move, 0, 1) == 'c' ) {
                return false;
            }
            return true;
        });
        //  For now, let's continue this helpful debugging output. TODO.
        print_r($available_moves);
        //  Select a strategy.
        //  If there is only one move (or no moves), fall back to the "stuck"
        //  strategy. In the future this strategy might do something cool.
        if ( count($available_moves) < 2 ) {
            return static::stuck($available_moves);
        }
        //  If the bot is surrounded by its own color and all moves have negative
        //  values, try escaping.
        if ( count(preg_grep("/^.$my_color\$/", $available_moves)) == count($available_moves) ) {
            echo "Yipes! Surrounded by own color...\n";
            $positive_scores = array_filter(static::evaluate_moves($available_moves), function($score){
                return $score > 0;
            });
            if ( count($positive_scores) == 0 ) {
                return static::escape($available_moves);
            }
        }
        //  Now that urgent situations are resolved, look at nearby bots and
        //  consider their behavior.
        $bots = Map::get_bots();
        foreach ($bots as $location => $bot) {
            if ( $bot->color != $my_color && Map::distance($bot->x, $bot->y, Map::current('x'), Map::current('y')) < 10 ) {
                if ( $bot->status() == 'inactive' ) {
                    //  The "hazard" value for this bot's coordinates can be reduced,
                    //  since it isn't moving.
                    static::$_value_matrix[$bot->y][$bot->x] /= 2;
                }
                else {
                    echo "Nearby active opponent: " . $bot->name . "\n";
                    print_r($bot->get_recent_moves(5));
                }
            }
        }
        //  If more than 20% of the tiles on the map are unclaimed, then select
        //  a friendlier, less aggressive movement pattern.
        if ( Map::count('ux') > array_product(Map::size()) * .2 ) {
            return static::cruise($available_moves);
        }
        //  Default strategy: best local move.
        return static::aggressive($available_moves);
    }

}



/**
 * Write a null move to the act file and halt.
 *
 * @return  void
 */
function stop ()
{
    file_put_contents(config::CLIENT_BASE_DIR . '/act', 'idle');
    die();
}


//  Try to avoid missing the latest update from the server.
sleep(8);

//  Get the current game situation.
echo "Retrieving updates...\n";
exec('cd ' . config::GAME_BASE_DIR . ' && git pull', $out);
exec('cd ' . config::CLIENT_BASE_DIR . ' && git pull', $out);

//  Read the current game board.
Map::load(config::GAME_BASE_DIR);

echo "Current position: " . Map::current('x') . ", " . Map::current('y') . "\n";
echo "Current team: " . Map::current('color') . "\n";
echo "Last move was: " . Map::last_move() . "\n";

$this_turn = Strategy::find_move();

if ( $this_turn['move'] == Map::last_move() ) {
    echo "Current move is same as last, skipping commit.\n";
}
else {
    //  Write the move.
    file_put_contents(config::CLIENT_BASE_DIR . '/act', $this_turn['move']);
    $out = [];
    exec('cd ' . config::CLIENT_BASE_DIR . " && git add act && git commit -m '" . $this_turn['logmsg'] . "' && git push", $out);
    print_r($out);
}
